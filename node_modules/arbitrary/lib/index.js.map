{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "src/Generator.js",
    "src/Long.js",
    "src/Skip32PureJS.js",
    "src/index.js",
    "src/scrambler.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/*\n *\n */\n\nimport Long from './Long';\n\nconst MAX_U32 = Math.pow(2, 32);\n\n// See https://en.wikipedia.org/wiki/Linear_congruential_generator#Period_length\n// for why we picked these numbers. We copied the 'Numerical Recipes' numbers from here\n// https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use\n// Creates a period length of [0, 2^32 - 1 ]\nconst c = 1013904223;\nconst m = 4294967296; // = Math.pow(2,32);\nconst a = 1664525;\n\n// This is the inverse of 'a' above for modolo multiplicative needed for calculating\n// the inverse of the standard linear congruent generator state update function.\n// For a good primer/starting point, see: http://stackoverflow.com/a/16630535.\n// The contribution of this library is making this approach work in Javascript\n// which has bit operators, multiplication, and modolo operation semantics\n// different than the 2s-complement integer math of languages like C/C++\nconst aInverse = -18851643;\n\nexport default class Generator {\n\n    // Creates a new Generator\n    // takes a seed or defaults to Math.random()\n    constructor(seed) {\n        seed = seed || Math.floor(Math.random() * MAX_U32);\n        this.state = seed;\n    }\n\n    /**\n     * @returns A number between the [0, 1);\n     */\n    percent() {\n        return (this._state / MAX_U32);\n    }\n\n    /**\n     * @returns A number between the min/max;\n     */\n    number(min, max) {\n        min = arguments.length > 1 ? min: 0;\n        max = arguments.length > 2 ? max: 1.0;\n        return (this._state / MAX_U32) * (max - min) + min;\n    }\n\n    /**\n     * @returns A number between the min/max;\n     */\n    integer(min, max) {\n        min = arguments.length >= 1 ? min: 0;\n        max = arguments.length >= 2 ? max: MAX_U32;\n        return Math.floor( (this._state / MAX_U32) * (max - min) + min );\n    }\n\n    /**\n     * @returns A u32 between the min/max;\n     */\n    /*u32(min, max){\n        if(arguments.length === 0){\n            return this._state;\n        }\n        // TODO: Put in constraints that guarantee if it's an integer,\n        // that min/max are integers, and that the result and min/max\n        // are in the allowed range of values for u32s\n        return Math.floor( this.number(min, max) );\n    }*/\n\n    /**\n     * Generate random bits. Up to 32, this is intended for 32 bit bit\n     * operation use cases\n     */\n    bits(bitCount) {\n        if (bitCount <= 0 || bitCount > 32) {\n            throw new Error(`Generator.bits()'s bitCount parameter must be in the range [1 - 32]. Provided bitCount=${bitCount}`);\n        }\n        // Use the higher bits as the lower bits have a low period. I haven't looked into the exact\n        // math of why, but in my tests in masking off the lower bits and graphing them it tended\n        // to loop very quickly.\n        // TODO: Test the above concern and in general do some analysis of the quality of generated\n        // numbers using different places of the number.\n        return this._state >>> (32 - bitCount);\n    }\n\n    // Move the generators internal state\n    // forward one step\n    get next() {\n        this._state = lcg(this._state);\n        return this;\n    }\n\n    // Move the generators internal state\n    // forward one step\n    get prev() {\n        this._state = rlcg(this._state);\n        return this;\n    }\n\n    // Set the state of the generator. Must be a valid u32 integer\n    set state(state) {\n        if (state < 0 || state >= MAX_U32) {\n            throw new Error(`Generator.state must be a number between 0 and (2^32 - 1). Provided state was ${state}.`)\n        }\n        this._state = state;\n    }\n\n    // Get the current internal state\n    get state() {\n        return this._state;\n    }\n}\n\nfunction lcg(state) {\n    state = (a * state + c) % m;\n    return state;\n}\n\nfunction rlcg(state) {\n    var result = Long.fromInt(aInverse)\n        .multiply(\n        Long.fromNumber(state - 1013904223)\n        );//\n    var pow2to32 = new Long(0, 1);\n\n    // Modulo doesn't work as we want (negatives stay negatives, we want wrapping around )\n    if (result.isNegative()) {\n        result = pow2to32.add(result.modulo(pow2to32));\n    } else {\n        result = result.modulo(pow2to32);\n    }\n\n    result = result.toNumber();\n    state = result;\n    return state;\n}\n",
    "// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Defines a Long class for representing a 64-bit two's-complement\n * integer value, which faithfully simulates the behavior of a Java \"long\". This\n * implementation is derived from LongLib in GWT.\n *\n */\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @struct\n * @constructor\n * @final\n */\nconst Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!Long} The corresponding Long value.\n */\nLong.fromInt = function(value) {\n    return new Long(value | 0, value < 0 ? -1 : 0);\n};\n\n\n/**\n * Returns a Long representing the given value.\n * NaN will be returned as zero. Infinity is converted to max value and\n * -Infinity to min value.\n * @param {number} value The number in question.\n * @return {!Long} The corresponding Long value.\n */\nLong.fromNumber = function(value) {\n  if (isNaN(value)) {\n    return Long.getZero();\n  } else if (value <= -Long.TWO_PWR_63_DBL_) {\n    return Long.getMinValue();\n  } else if (value + 1 >= Long.TWO_PWR_63_DBL_) {\n    return Long.getMaxValue();\n  } else if (value < 0) {\n    return Long.fromNumber(-value).negate();\n  } else {\n    return new Long(\n        (value % Long.TWO_PWR_32_DBL_) | 0,\n        (value / Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!Long} The corresponding Long value.\n */\nLong.fromBits = function(lowBits, highBits) {\n  return new Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!Long} The corresponding Long value.\n */\nLong.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Long.getZero();\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\nLong.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\nLong.TWO_PWR_32_DBL_ =\n    Long.TWO_PWR_16_DBL_ * Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nLong.TWO_PWR_64_DBL_ =\n    Long.TWO_PWR_32_DBL_ * Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nLong.TWO_PWR_63_DBL_ = Long.TWO_PWR_64_DBL_ / 2;\n\n\n/**\n * @return {!Long}\n * @public\n */\nLong.getZero = function() {\n  return Long.fromInt(0);\n};\n\n\n/**\n * @return {!Long}\n * @public\n */\nLong.getOne = function() {\n  return Long.fromInt(1);\n};\n\n\n/**\n * @return {!Long}\n * @public\n */\nLong.getNegOne = function() {\n  return Long.fromInt(-1);\n};\n\n\n/**\n * @return {!Long}\n * @public\n */\nLong.getMaxValue = function() {\n  return Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n};\n\n\n/**\n * @return {!Long}\n * @public\n */\nLong.getMinValue = function() {\n  return Long.fromBits(0, 0x80000000 | 0);\n};\n\n\n/**\n * @return {!Long}\n * @public\n */\nLong.getTwoPwr24 = function() {\n  return Long.fromInt(1 << 24);\n};\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\nLong.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\nLong.prototype.toNumber = function() {\n  return this.high_ * Long.TWO_PWR_32_DBL_ +\n      this.getLowBitsUnsigned();\n};\n\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\nLong.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equals(Long.getMinValue())) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (6) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Long.fromNumber(Math.pow(radix, 6));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    // The right shifting fixes negative values in the case when\n    // intval >= 2^31; for more details see\n    // https://github.com/google/closure-library/pull/498\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 6) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\nLong.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\nLong.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\nLong.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ? this.low_ :\n                            Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\nLong.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equals(Long.getMinValue())) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\nLong.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\nLong.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\nLong.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\nLong.prototype.equals = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\nLong.prototype.notEquals = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\nLong.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\nLong.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\nLong.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\nLong.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\nLong.prototype.compare = function(other) {\n  if (this.equals(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!Long} The negation of this value. */\nLong.prototype.negate = function() {\n  if (this.equals(Long.getMinValue())) {\n    return Long.getMinValue();\n  } else {\n    return this.not().add(Long.getOne());\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {Long} other Long to add to this one.\n * @return {!Long} The sum of this and the given Long.\n */\nLong.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {Long} other Long to subtract from this.\n * @return {!Long} The difference of this and the given Long.\n */\nLong.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {Long} other Long to multiply with this.\n * @return {!Long} The product of this and the other.\n */\nLong.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Long.getZero();\n  } else if (other.isZero()) {\n    return Long.getZero();\n  }\n\n  if (this.equals(Long.getMinValue())) {\n    return other.isOdd() ? Long.getMinValue() :\n                           Long.getZero();\n  } else if (other.equals(Long.getMinValue())) {\n    return this.isOdd() ? Long.getMinValue() :\n                          Long.getZero();\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(Long.getTwoPwr24()) &&\n      other.lessThan(Long.getTwoPwr24())) {\n    return Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {Long} other Long by which to divide.\n * @return {!Long} This Long divided by the given one.\n */\nLong.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Long.getZero();\n  }\n\n  if (this.equals(Long.getMinValue())) {\n    if (other.equals(Long.getOne()) ||\n        other.equals(Long.getNegOne())) {\n      return Long.getMinValue();  // recall -MIN_VALUE == MIN_VALUE\n    } else if (other.equals(Long.getMinValue())) {\n      return Long.getOne();\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equals(Long.getZero())) {\n        return other.isNegative() ? Long.getOne() :\n                                    Long.getNegOne();\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equals(Long.getMinValue())) {\n    return Long.getZero();\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Long.getZero();\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Long.getOne();\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {Long} other Long by which to mod.\n * @return {!Long} This Long modulo the given one.\n */\nLong.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!Long} The bitwise-NOT of this value. */\nLong.prototype.not = function() {\n  return Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {Long} other The Long with which to AND.\n * @return {!Long} The bitwise-AND of this and the other.\n */\nLong.prototype.and = function(other) {\n  return Long.fromBits(\n      this.low_ & other.low_, this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {Long} other The Long with which to OR.\n * @return {!Long} The bitwise-OR of this and the other.\n */\nLong.prototype.or = function(other) {\n  return Long.fromBits(\n      this.low_ | other.low_, this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {Long} other The Long with which to XOR.\n * @return {!Long} The bitwise-XOR of this and the other.\n */\nLong.prototype.xor = function(other) {\n  return Long.fromBits(\n      this.low_ ^ other.low_, this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Long} This shifted to the left by the given amount.\n */\nLong.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Long.fromBits(\n          low << numBits, (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * The new leading bits match the current sign bit.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Long} This shifted to the right by the given amount.\n */\nLong.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)), high >> numBits);\n    } else {\n      return Long.fromBits(\n          high >> (numBits - 32), high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\nLong.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)), high >>> numBits);\n    } else if (numBits == 32) {\n      return Long.fromBits(high, 0);\n    } else {\n      return Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n\n/**\n * @enum {number} Ids of commonly requested Long instances.\n * @private\n */\nLong.ValueCacheId_ = {\n  MAX_VALUE: 1,\n  MIN_VALUE: 2,\n  ZERO: 3,\n  ONE: 4,\n  NEG_ONE: 5,\n  TWO_PWR_24: 6\n};\n\nexport default Long;\n",
    "/*\n   **Francois**:\n   Based on an implementation that's based on further implementations, most significant\n   change is removing the use of Buffers and ArrayBuffers. Original implementation was forked\n   here (hopefully the original repo still exists, to play it safe I've forked it)\n   https://github.com/francoislaberge/node-skip32\n\n   ** Original Comments in skip32.js's implementation **\n   Skip32PureJS.js - public domain javascript implementation of:\n\n   SKIP32 -- 32 bit block cipher based on SKIPJACK.\n   Written by Greg Rose, QUALCOMM Australia, 1999/04/27.\n\n   In common: F-table, G-permutation, key schedule.\n   Different: 24 round feistel structure.\n   Based on:  Unoptimized test implementation of SKIPJACK algorithm\n              Panu Rissanen <bande@lut.fi>\n\n   SKIPJACK and KEA Algorithm Specifications\n   Version 2.0\n   29 May 1998\n\n   Not copyright, no rights reserved.\n*/\nfunction Skip32() {\n    // Francois: I have modified the code to have a hardcoded key. values\n    // were taken from the example code in the node-skip32 project:\n    // https://github.com/0x4139/node-skip32#example\n    this.key = [0x9b, 0x21, 0x96, 0xe, 0x1a, 0xcf, 0x24, 0x5f, 0x14, 0x93];\n};\n\nSkip32.prototype.init = function(){\n};\n\n// Francois: I have modified the code to remove the use of Buffers and ArrayBuffers\n// so that the code is more portable to other browsers and environments\nconst ftable = [\n    0xa3,0xd7,0x09,0x83,0xf8,0x48,0xf6,0xf4,0xb3,0x21,0x15,0x78,0x99,0xb1,0xaf,0xf9,\n    0xe7,0x2d,0x4d,0x8a,0xce,0x4c,0xca,0x2e,0x52,0x95,0xd9,0x1e,0x4e,0x38,0x44,0x28,\n    0x0a,0xdf,0x02,0xa0,0x17,0xf1,0x60,0x68,0x12,0xb7,0x7a,0xc3,0xe9,0xfa,0x3d,0x53,\n    0x96,0x84,0x6b,0xba,0xf2,0x63,0x9a,0x19,0x7c,0xae,0xe5,0xf5,0xf7,0x16,0x6a,0xa2,\n    0x39,0xb6,0x7b,0x0f,0xc1,0x93,0x81,0x1b,0xee,0xb4,0x1a,0xea,0xd0,0x91,0x2f,0xb8,\n    0x55,0xb9,0xda,0x85,0x3f,0x41,0xbf,0xe0,0x5a,0x58,0x80,0x5f,0x66,0x0b,0xd8,0x90,\n    0x35,0xd5,0xc0,0xa7,0x33,0x06,0x65,0x69,0x45,0x00,0x94,0x56,0x6d,0x98,0x9b,0x76,\n    0x97,0xfc,0xb2,0xc2,0xb0,0xfe,0xdb,0x20,0xe1,0xeb,0xd6,0xe4,0xdd,0x47,0x4a,0x1d,\n    0x42,0xed,0x9e,0x6e,0x49,0x3c,0xcd,0x43,0x27,0xd2,0x07,0xd4,0xde,0xc7,0x67,0x18,\n    0x89,0xcb,0x30,0x1f,0x8d,0xc6,0x8f,0xaa,0xc8,0x74,0xdc,0xc9,0x5d,0x5c,0x31,0xa4,\n    0x70,0x88,0x61,0x2c,0x9f,0x0d,0x2b,0x87,0x50,0x82,0x54,0x64,0x26,0x7d,0x03,0x40,\n    0x34,0x4b,0x1c,0x73,0xd1,0xc4,0xfd,0x3b,0xcc,0xfb,0x7f,0xab,0xe6,0x3e,0x5b,0xa5,\n    0xad,0x04,0x23,0x9c,0x14,0x51,0x22,0xf0,0x29,0x79,0x71,0x7e,0xff,0x8c,0x0e,0xe2,\n    0x0c,0xef,0xbc,0x72,0x75,0x6f,0x37,0xa1,0xec,0xd3,0x8e,0x62,0x8b,0x86,0x10,0xe8,\n    0x08,0x77,0x11,0xbe,0x92,0x4f,0x24,0xc5,0x32,0x36,0x9d,0xcf,0xf3,0xa6,0xbb,0xac,\n    0x5e,0x6c,0xa9,0x13,0x57,0x25,0xb5,0xe3,0xbd,0xa8,0x3a,0x01,0x05,0x59,0x2a,0x46,\n];\n\nSkip32.prototype.round16 = function(k, n){\n\tvar g1, g2, g3, g4, g5, g6;\n\tg1 = (n>>8) & 0xff;\n\tg2 = (n>>0) & 0xff;\n\tg3 = ftable[g2^this.key[(4*k+0)%10]] ^ g1;\n\tg4 = ftable[g3^this.key[(4*k+1)%10]] ^ g2;\n\tg5 = ftable[g4^this.key[(4*k+2)%10]] ^ g3;\n\tg6 = ftable[g5^this.key[(4*k+3)%10]] ^ g4;\n\treturn (g5<<8)+g6;\n}\n\nSkip32.prototype.core = function(n,k,d){\n\tvar i, k, wl, wr;\n\twl = (((n>>24) & 0xff)<<8) + (((n>>16) & 0xff)<<0);\n\twr = (((n>>8) & 0xff)<<8) + (((n>>0) & 0xff)<<0);\n\tfor(i=0;i<24/2;i++){\n\t\twr ^= this.round16(k, wl) ^ k;\n\t\tk+=d;\n\t\twl ^= this.round16(k, wr) ^ k;\n\t\tk+=d;\n\t}\n\treturn ((wr << 16) | wl)>>>0;\n}\n\nSkip32.prototype.encrypt = function(n){\n\treturn this.core(n,0,1);\n}\n\nSkip32.prototype.decrypt = function(n){\n\treturn this.core(n,23,-1);\n}\n\nmodule.exports.Skip32 = Skip32;\n",
    "import Generator from './Generator';\nimport {scramble,descramble} from './scrambler';\n\nconst arbitrary = {\n    Generator,\n    scramble,\n    descramble\n};\n\nexport default arbitrary;\n",
    "const Skip32 = require('./Skip32PureJS').Skip32;\nconst cypher = new Skip32();\n\n/*\n * Takes a unsigned 32 bit integer and returns an unsigned 32 bit integer\n * with it's bits scrambled.\n *\n * Ideal for taking a series of incrementing numbers and creating a pseudo random version.\n * Is reversible via calling descramble() on a scrambled number.\n */\nexport function scramble(number){\n\treturn cypher.encrypt(number);\n}\n\n/*\n * Takes a scrambled unsigned 32 bit integer and returns the unscrambled unsigned 32 bit\n * integer version.\n *\n * Ideal for taking a series of incrementing numbers and creating a pseudo random version.\n * Use this to figure out the original number crated from calls to scramble()\n */\nexport function descramble(scrambledNumber){\n\treturn cypher.decrypt(scrambledNumber);\n}\n"
  ]
}